{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Auction.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Pragma\npragma solidity ^0.8.20;\n// Imports\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// Error Codes\nerror Auction__AlreadyStarted();\nerror Auction__NotOwner();\nerror Auction__NotStarted();\nerror Auction__AlreadyEnded();\nerror Auction__BidTooLow();\nerror Auction__TransferFailed();\nerror Auction__NotEnded();\nerror Auction__ReservePriceNotMet();\n\n/**\n * @title Auction\n * @author Soheil Zolfaghari\n * @dev A simple auction contract that allows bidding and withdrawal of funds.\n * The contract is Ownable, meaning that it has an owner who can start and end the auction.\n */\ncontract Auction is Ownable {\n    // State Variables\n    uint public s_endAt; // Timestamp at which the auction ends\n    uint public s_duration; // Duration of the auction in seconds\n    bool public s_started; // Indicates whether the auction has started\n    bool public s_ended; // Indicates whether the auction has ended\n    uint public s_reservePrice; // Minimum price required to meet the reserve\n    address public s_highestBidder; // Address of the highest bidder\n    uint public s_highestBid; // Value of the highest bid\n    mapping(address => uint) public s_pendingReturns; // Pending returns for each bidder\n\n    // Events\n    event Start();\n    event Bid(address indexed sender, uint amount);\n    event Withdraw(address indexed bidder, uint amount);\n    event End(address winner, uint amount);\n\n    // Functions\n\n    /**\n     * @dev Constructor function.\n     * @param _startingBid The starting bid value for the auction.\n     * @param _duration The duration of the auction in seconds.\n     * @param _reservePrice The minimum price required to meet the reserve.\n     */\n    constructor(uint _startingBid, uint _duration, uint _reservePrice) {\n        s_highestBid = _startingBid;\n        s_duration = _duration;\n        s_reservePrice = _reservePrice;\n        transferOwnership(msg.sender);\n    }\n\n    /**\n     * @dev Starts the auction.\n     * @notice Only the owner can start the auction.\n     */\n    function start() external onlyOwner {\n        if (s_started) revert Auction__AlreadyStarted();\n\n        s_started = true;\n        s_endAt = block.timestamp + s_duration;\n\n        emit Start();\n    }\n\n    /**\n     * @dev Allows a user to place a bid in the auction.\n     * @notice The auction must be started and not ended.\n     * @notice The bid amount must be higher than the current highest bid.\n     */\n    function bid() external payable {\n        if (!s_started) revert Auction__NotStarted();\n        if (block.timestamp >= s_endAt) revert Auction__AlreadyEnded();\n        if (msg.value <= s_highestBid) revert Auction__BidTooLow();\n\n        // Add the current bid to pendingReturns of the previous s_highestBidder\n        if (s_highestBidder != address(0)) {\n            s_pendingReturns[s_highestBidder] += s_highestBid;\n        }\n\n        s_highestBidder = msg.sender;\n        s_highestBid = msg.value;\n\n        emit Bid(msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Allows a bidder to withdraw their pending returns.\n     */\n    function withdraw() public {\n        uint amount = s_pendingReturns[msg.sender];\n        if (amount > 0) {\n            // Check-Effects-Interactions pattern to prevent re-entrancy attacks\n            s_pendingReturns[msg.sender] = 0;\n            (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n            if (!success) {\n                s_pendingReturns[msg.sender] = amount;\n                revert Auction__TransferFailed();\n            }\n        }\n        emit Withdraw(msg.sender, amount);\n    }\n\n    /**\n     * @dev Ends the auction and transfers funds to the highest bidder.\n     * @notice Only the owner can end the auction.\n     * @notice The auction must be started, not ended, and the reserve price must be met.\n     */\n    function end() external onlyOwner {\n        if (!s_started) revert Auction__NotStarted();\n        if (block.timestamp < s_endAt) revert Auction__NotEnded();\n        if (s_ended) revert Auction__AlreadyEnded();\n        if (s_highestBid < s_reservePrice) revert Auction__ReservePriceNotMet();\n\n        s_ended = true;\n\n        if (s_highestBidder != address(0)) {\n            (bool success, ) = payable(owner()).call{value: s_highestBid}(\"\");\n            if (!success) revert Auction__TransferFailed();\n        }\n\n        emit End(s_highestBidder, s_highestBid);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}